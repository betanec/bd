
# create table nonnormalize (

# "номер_ведомости" SERIAL NOT null PRIMARY key,
# "название_курса_лекций" varchar(100) NOT NULL,
# "индентификатор_курса_лекций" int4 NOT NULL,
# "номер_группы" varchar(10) NOT NULL,
# "фио_преподавателя" varchar(150) NOT NULL,
# "табельный_номер_преподавателя" int4 NOT NULL,
# "дата_кр" date NOT NULL,
# "свод" json);


# insert into nonnormalize ("номер_ведомости", "название_курса_лекций", "индентификатор_курса_лекций", "номер_группы", "фио_преподавателя", "табельный_номер_преподавателя", "дата_кр", "свод") values (
# 3141, 
# 'Методология программной инженерии',
# 3141, 
# 'M20-504',
# 'Иващенко М.Г.',
# 0,
# '2021-11-28',
# '[{"фио_студента":"Додонов Додон","номер_зачетки":"m2050401","оценка":"3","фио_преподавателя":"Иващенко М.Г.","номер_табеля_преподавателя":0},{"фио_студента":"Майская С.","номер_зачетки":"m2050401","оценка":"3","фио_преподавателя":"Иващенко М.Г.","номер_табеля_преподавателя":0}]'
# );


# insert into nonnormalize ("номер_ведомости", "название_курса_лекций", "индентификатор_курса_лекций", "номер_группы", "фио_преподавателя", "табельный_номер_преподавателя", "дата_кр", "свод") values (
# 3141, 
# 'Методология программной инженерии',
# 3141, 
# 'M20-514',
# 'Иващенко М.Г.',
# 0,
# '2021-11-28',
# '[{"фио_студента":"Бильбо Б","номер_зачетки":"m2051401","оценка":"3","фио_преподавателя":"Иващенко М.Г.","номер_табеля_преподавателя":0},{"фио_студента":"Фродо Б.","номер_зачетки":"m2050401","оценка":"4","фио_преподавателя":"Иващенко М.Г.","номер_табеля_преподавателя":0}, 
# 	{"фио_студента":"Роки Б","номер_зачетки":"m2051401","оценка":"5","фио_преподавателя":"Иващенко М.Г.","номер_табеля_преподавателя":0}]'
# );

# insert into nonnormalize ("номер_ведомости", "название_курса_лекций", "индентификатор_курса_лекций", "номер_группы", "фио_преподавателя", "табельный_номер_преподавателя", "дата_кр", "свод") values (
# 010,
# 'Взаимосвязь открытых систем',
# 010,
# 'M20-504',
# 'Никифоров А.Ю.',
# 1,
# '2021-10-23',
# '[
# 	{"фио_студента":"Стетхем Д.","номер_зачетки":"m2051401","оценка":"5","фио_преподавателя":"Никифоров А.Ю.","номер_табеля_преподавателя":1}, 
# 	{"фио_студента":"Сталоне С.","номер_зачетки":"m2051401","оценка":"4","фио_преподавателя":"Никифоров А.Ю.","номер_табеля_преподавателя":1},
# 	{"фио_студента":"Гришин И.","номер_зачетки":"m2051401","оценка":"3","фио_преподавателя":"Никифоров А.Ю.","номер_табеля_преподавателя":1}
# ]'
# );

# insert into nonnormalize ("номер_ведомости", "название_курса_лекций", "индентификатор_курса_лекций", "номер_группы", "фио_преподавателя", "табельный_номер_преподавателя", "дата_кр", "свод") values (
# 11092001,
# 'Взаимосвязь открытых систем',
# 11092001,
# 'M20-504',
# 'Никифоров А.Ю.',
# 1,
# '2021-11-20',
# '[
# 	{"фио_студента":"Трейсер О.","номер_зачетки":"m2051401","оценка":"4","фио_преподавателя":"Никифоров А.Ю.","номер_табеля_преподавателя":1}, 
# 	{"фио_студента":"Ветрокрылая С.","номер_зачетки":"m2051401","оценка":"5","фио_преподавателя":"Никифоров А.Ю.","номер_табеля_преподавателя":1},
# 	{"фио_студента":"Лц Ш.","номер_зачетки":"m2051401","оценка":"2","фио_преподавателя":"Никифоров А.Ю.","номер_табеля_преподавателя":1}
# ]'
# );


# @@
# create type stGr as ("фио_студента" text, "номер_зачетки" text, "оценка" int4, "фио_преподавателя" text, "номер_табеля_преподавателя" int4);

# create table nonnormalize_arr as (
# select 
# 	"номер_ведомости",
# 	"название_курса_лекций",
# 	"индентификатор_курса_лекций",
# 	"номер_группы",
# 	"фио_преподавателя", 
# 	"табельный_номер_преподавателя",
# 	"дата_кр",
# 	array_agg(array[(arr->>'фио_студента', arr->>'номер_зачетки', arr->>'оценка', arr->>'фио_преподавателя', arr->>'номер_табеля_преподавателя')::stGr]) as "свод"
# from   nonnormalize
# cross join lateral json_array_elements("свод") as arr
# group  by 
# 	"номер_ведомости",
# 	"название_курса_лекций",
# 	"индентификатор_курса_лекций",
# 	"номер_группы",
# 	"фио_преподавателя", 
# 	"табельный_номер_преподавателя",
# 	"дата_кр");


# @@@
# select 
# 	tmp."номер_ведомости",
# 	tmp."название_курса_лекций",
# 	tmp."индентификатор_курса_лекций",
# 	tmp."номер_группы",
# 	tmp."фио_преподавателя", 
# 	tmp."табельный_номер_преподавателя",
# 	tmp."дата_кр"
# 	 , tmp.arr->>'фио_студента' as "фио_студента"
# 	 , tmp.arr->>'номер_зачетки' as "номер_зачетки"
# 	 , tmp.arr->>'оценка' as "оценка"
# 	 , tmp.arr->>'фио_преподавателя' as "фио_преподавателя"
# 	 , tmp.arr->>'номер_табеля_преподавателя' as "номер_табеля_преподавателя"
# 	 from (
# select "номер_ведомости",
# 	"название_курса_лекций",
# 	"индентификатор_курса_лекций",
# 	"номер_группы",
# 	"фио_преподавателя", 
# 	"табельный_номер_преподавателя",
# 	"дата_кр"
#      , json_array_elements("свод") as arr 
# from nonnormalize) as tmp;

# @@@@
# select "номер_ведомости",
# 	"название_курса_лекций",
# 	"индентификатор_курса_лекций",
# 	"номер_группы",
# 	"фио_преподавателя", 
# 	"табельный_номер_преподавателя",
# 	"дата_кр"
#      , (unnest("свод")).фио_студента
#      , (unnest("свод")).номер_зачетки
#      , (unnest("свод")).оценка
#      , (unnest("свод")).фио_преподавателя
#      , (unnest("свод"))."номер_табеля_преподавателя"
# from nonnormalize_arr;

# @@@@@
# create table контрольные as (
# 	select "номер_ведомости",
# 	"название_курса_лекций",
# 	"индентификатор_курса_лекций",
# 	"номер_группы",
# 	"фио_преподавателя", 
# 	"табельный_номер_преподавателя",
# 	"дата_кр"
# 		 from nonnormalize);

# create table курс as (
# 	select "название_курса_лекций"
# 		 , "индентификатор_курса_лекций"
# 		 from nonnormalize
# 		 group by "индентификатор_курса_лекций", "название_курса_лекций");

# create table преподаватель as (
# 	select "фио_преподавателя"
# 		 , "табельный_номер_преподавателя"
# 		 from nonnormalize
# 		 group by "фио_преподавателя", "табельный_номер_преподавателя");

# create table студенты as (
# select tmp.arr->>'фио_студента' as "фио_студента"
# 	 , tmp.arr->>'номер_зачетки' as "номер_зачетки"
# 	 from (
# 		select json_array_elements("свод") as arr from nonnormalize
# 	 ) as tmp
# 	group by "фио_студента", "номер_зачетки");

# create table свод as (
# select 
# 	   tmp."номер_ведомости"
# 	 , tmp.arr->>'номер_зачетки' as "номер_зачетки"
# 	 , tmp.arr->>'оценка' as "оценка"
# 	 , tmp.arr->>'номер_табеля_преподавателя' as "номер_табеля_преподавателя"
# 	 from (
# 		select "номер_ведомости", json_array_elements("свод") as arr from nonnormalize
# 	 ) as tmp);

# create table перподаватель_табель as (
# select tmp.arr->>'фио_преподавателя' as "фио_преподавателя"
# 	 , tmp.arr->>'номер_табеля_преподавателя' as "номер_табеля_преподавателя"
# 	 from (
# 		select json_array_elements("свод") as arr from nonnormalize
# 	 ) as tmp
# 	group by "фио_преподавателя", "номер_табеля_преподавателя");


# @@@@@@
# select контрольные."номер_ведомости"
#      , контрольные."идентификатор_курса_лекций"
#      , курс."название_курса_лекций"
#      , контрольные."номер_группы"
#      , контрольные."табельный_номер_преподавателя"
#      , преподаватель."фио_преподавателя"
#      , контрольные."дата_кр"
#      , json_agg(json_build_object(
#        'номер_зачетки', свод."номер_зачетки",
#        'фио_студента', студенты."фио_студента",
#        'оценка', свод."оценка",
#        'номер_табеля_преподавателя', преподаватель_табель."номер_табеля_преподавателя",
#        'фио_преподавателя', преподаватель."фио_преподавателя"))
# from контрольные, курс, преподаватель, свод, студенты, преподаватель_табель
# 	where 
# 	cast(преподаватель_табель."номер_табеля_преподавателя" as INTEGER) = контрольные."табельный_номер_преподавателя"
# 	and   курс."идентификатор_курса_лекций" = контрольные."идентификатор_курса_лекций"
# 	and   студенты."номер_зачетки" = свод."номер_зачетки" 
# 	and   преподаватель_табель."номер_табеля_преподавателя" = свод."номер_табеля_преподавателя"
# 	and   свод."номер_ведомости" = контрольные."номер_ведомости"
# group by 
# 		контрольные."номер_ведомости"
#      , контрольные."идентификатор_курса_лекций"
#      , курс."название_курса_лекций"
#      , контрольные."номер_группы"
#      , контрольные."табельный_номер_преподавателя"
#      , преподаватель."фио_преподавателя"
#      , контрольные."дата_кр"
# ;


import pandas as pd
import openpyxl
xl = pd.ExcelFile('C:\\DEV\\study_M\\to_string.xlsx')
all_queries_in_str = xl.parse(0).values.tolist()[0][0]
all_entities = [
['ненормализированная', 'ном_ведомости', 'название_курса_лекций', 'идентификатор_курса_лекций', 'номер_группы', 'фио_преподавателя', 'табельный_номер_преподавателя', 'дата_кр', 'свод'], 
['ненормализированная_арр', 'номер_ведомости', 'название_курса_лекций', 'идентификатор_курса_лекций', 'номер_группы', 'фио_преподавателя', 'табельный_номер_преподавателя', 'дата_кр', 'свод'], 
['контрольные', 'номер_ведомости', 'название_курса_лекций', 'идентификатор_курса_лекций', 'номер_группы', 'фио_преподавателя', 'табельный_номер_преподавателя', 'дата_кр'], 
['направление', 'название_курса_лекций', 'идентификатор_курса_лекций'], 
['преподаватель', 'фио_преподавателя', 'табельный_номер_преподавателя'], 
['преподаватель_табель', 'фио_преподавателя', 'номер_табеля_преподавателя'], 
['свод', 'номер_ведомости', 'номер_зачетки', 'оценка', 'номер_табеля_преподавателя'], 
['студенты', 'фио_студента', 'номер_зачетки']]



# new_entities = 
# [
# ['unnormalize', 'report_number', 'lecture_course_name', 'lecture_course_identifier', 'group_number', 'teacher_name', 'teacher_name_number', 'date_cr', 'summary'],
# ['unnormalize_arr', 'report_number', 'lecture_course_name', 'lecture_course_identifier', 'group_number', 'teacher_name', 'teacher_number', 'date_cr', 'summary'],
# ['control', 'message_number', 'lecture_course_name', 'lecture_course_identifier', 'group_number', 'teacher_name', 'teacher_name_number', 'date_cr'],
# ['course', 'lecture_course_name', 'lecture_course_identifier'],
# ['teacher', 'teacher_name', 'teacher_person_number'],
# ['teacher_table', 'teacher_name', 'teacher_book_number'],
# ['summary', 'report_number', 'student_number', 'grade', 'teacher_book_number'],
# ['students', 'student_name', 'student_number']
# ]

# layout = dict(zip(map(ord, "абвгдежзиклмнопрстуфкцй_ыйячь"),
#                            "abvgdejziklmnoprstufkcy_i"))

def translate(text):
	layout = dict(zip([i for i in 'абвгдежзиклмнопрстуфкцыйячь_'], [i for i in 'abvgdejziklmnoprstufkciy']+['ya', 'ch', '', '_']))
	res = ""
	for l in text:
		if l in layout:
			res += layout[l]
		else:
			res += l
	return res

# igor
# def translate(text):
# 	layout = dict(zip([i for i in 'абвгдежзиклмнопрстуфкцыйячь_'], [i for i in 'abvgdejziklmnoprstufkciy']+['ya', 'ch', '', '_']))
# 	res = ""
# 	for word in text.split('_'):
# 		for l in word[:3]:
# 			if l in layout:
# 				res += layout[l]
# 			else:
# 				res += l
# 		res += '_'
# 	return res

new_entities = [translate(i) for i in [x for xs in all_entities for x in xs]]	

print(new_entities)




math_queries = {
1:['(X[X.номер_ведомости=Y.номер_ведомости]Y)[Y.номер_ведомости]', 'X.*, Y.*', 'public_свод AS X, public_контрольные AS Y'],
2:['((X[X.номер_зачетки]) EXCEPT ((X[X.номер_зачетки=Z.номер_зачетки AND X.номер_ведомости<>Z.номер_ведомости]Z)[Z.номер_зачетки]))',
'X.номер_зачетки', 'tab_1 AS X, tab_1 AS Z' ],
3:['(X[X.номер_зачетки=Y.номер_зачетки]Y)', 'Y.*', 'tab_2 AS X, public_студенты AS Y'], 
5:['( (Z[Z.номер_табеля_преподавателя]) EXCEPT ((X[X.номер_табеля_преподавателя=Z.номер_табеля_преподавателя AND (X.оценка="4" OR X.оценка="5")])[X.номер_табеля_преподавателя]) )',
'Z.номер_табеля_преподавателя', 'tab_1 AS X, tab_1 AS Z'],
6:['(X[X.номер_табеля_преподавателя=Y.номер_табеля_преподавателя]Y)', 'Y.*', 'tab_3 AS X, public_преподаватель_табель AS Y'],
7:['(X[X.номер_зачетки=Y.номер_зачетки]Y)', 'Y.номер_зачетки, Y.номер_группы, X.фио_студента', 'public_студенты AS X, tab_1 AS Y'],
8:['(X[X.номер_ведомости=Y.номер_ведомости]Y)', 'X.*, Y.идентификатор_курса_лекций', 'public_свод AS X, public_контрольные AS Y'],   
9:['( ((Z[Z.номер_группы=X.номер_группы]X)[X.номер_зачетки, Z.идентификатор_курса_лекций]) EXCEPT (Y[Y.номер_зачетки, Y.идентификатор_курса_лекций]) )',
'X.номер_зачетки, Z.идентификатор_курса_лекций', 'tab_4 AS X, tab_5 AS Y, public_контрольные AS Z'],
10:['( ((Y[Y.номер_зачетки=X.номер_зачетки]X)[Y.номер_зачетки]) EXCEPT (Z[Z.номер_зачетки]) )', 'X.номер_зачетки, X.номер_группы', 'Tab_1 AS X, public_свод AS Y, tab_6 AS Z'],
11:['(X[X.номер_зачетки=Y.номер_зачетки]Y)', 'X.номер_зачетки, X.номер_группы, Y.фио_студента', 'tab_7 AS X, public_студенты AS Y'],
12:['(((X[X.номер_табеля_преподавателя=Y.номер_табеля_преподавателя]Y)[Y.идентификатор_курса_лекций]) DELETE (Z[Z.идентификатор_курса_лекций]) )', 'X.*', 'public_преподаватель_табель AS X, tab_1 AS Y, public_курс AS Z'],
13:['(((X[X.номер_табеля_преподавателя=Y.номер_табеля_преподавателя]Y)[X.номер_табеля_преподавателя]) EXCEPT ((Z[Z.номер_табеля_преподавателя=Y.номер_табеля_преподавателя AND Z.номер_группы<>Y.номер_группы]Y)[Z.номер_табеля_преподавателя]) )', 
'X.*','public_преподаватель_табель AS X, tab_1 AS Y, tab_1 AS Z'],
14:['( (Y[Y.номер_табеля_преподавателя]) EXCEPT (((X[X.номер_табеля_преподавателя=Y.номер_табеля_преподавателя AND X.номер_табеля_преподавателя=Z.номер_табеля_преподавателя AND Y.номер_группы<>Z.номер_группы AND X.номер_группы<>Y.номер_группы]Y) [X.номер_группы<>Z.номер_группы]Z)[X.номер_группы]) )',
'Y.номер_табеля_преподавателя', 'tab_1 as X, tab_1 as Y, tab_1 as Z'],
15:['((X[X.номер_табеля_преподавателя]) EXCEPT ((X[X.номер_табеля_преподавателя=Y.номер_табеля_преподавателя AND X.идентификатор_курса_лекций<>Y.идентификатор_курса_лекций]Y)[Y.номер_табеля_преподавателя]) )',
'X.номер_табеля_преподавателя', 'tab_1 as X, tab_1 as Y'],
16:['(X[X.номер_табеля_преподавателя]) EXCEPT (Y[Y.номер_табеля_преподавателя]) )', 'X.номер_табеля_преподавателя', 'tab_8 as X, tab_9 as Y'],
17:['( (X[X.идентификатор_курса_лекций, X.номер_зачетки]) EXCEPT ((Y[Y.номер_зачетки=Z.номер_зачетки AND Y.идентификатор_курса_лекций=Z.идентификатор_курса_лекций AND (Y.оценка="4" OR Y.оценка="3" or Y.оценка="2")]Z)[Y.идентификатор_курса_лекций, Y.номер_зачетки]) )',
'X.идентификатор_курса_лекций, X.номер_зачетки', 'tab_5 AS X, tab_5 AS Y, tab_5 AS Z'],
18:['( (X[X.идентификатор_курса_лекций, X.номер_зачетки]) EXCEPT (Y[Y.идентификатор_курса_лекций, Y.номер_зачетки]) )',
'X.идентификатор_курса_лекций', 'tab_5 as X, tab_10 as Y'],
19:['( (Y[Y.идентификатор_курса_лекций=X.идентификатор_курса_лекций]X)[Y.идентификатор_курса_лекций] )', 'X.*', 'public_курс AS X, tab_11 AS Y']
}
big_string = []
for i in math_queries:
	temp_str = ""
	for ii in range(3):
		temp_str += ''.join(math_queries[i][ii]+' <> ')
	big_string.append(temp_str + ' ('+str(i) + ')' + '\@/')
new_str = []
new_str.append(''.join(big_string))
list_str_math_queries = new_str[0] 

# kizaru = list(set(zip([x for xs in all_entities for x in xs], [x for xs in new_entities for x in xs])))
kizaru = list(set(zip([x for xs in all_entities for x in xs], new_entities)))
# print(kizaru)

for x, y in kizaru:
	all_queries_in_str = all_queries_in_str.replace(x, y)
	list_str_math_queries = list_str_math_queries.replace(x, y)
print(all_queries_in_str)
print('first end')
for i in list_str_math_queries.split('\@/'):

	print(i)


